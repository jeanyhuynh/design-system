{"remainingRequest":"/Users/tranghuynh/Documents/design-system/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/tranghuynh/Documents/design-system/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/tranghuynh/Documents/design-system/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/tranghuynh/Documents/design-system/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/tranghuynh/Documents/design-system/components/input-group/README.md?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tranghuynh/Documents/design-system/components/input-group/README.md","mtime":1557917916564},{"path":"/Users/tranghuynh/Documents/design-system/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tranghuynh/Documents/design-system/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/Users/tranghuynh/Documents/design-system/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tranghuynh/Documents/design-system/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tranghuynh/Documents/design-system/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as codeTypes from '@/utils/codeTypes';\nimport dataContent from '@/content/components/inputGroup';\nexport default {\n  data: function data() {\n    return {\n      codeTypes: codeTypes,\n      content: dataContent\n    };\n  }\n};",{"version":3,"sources":["README.md"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,OAAA,KAAA,SAAA,MAAA,mBAAA;AACA,OAAA,WAAA,MAAA,iCAAA;AAEA,eAAA;AACA,MADA,kBACA;AACA,WAAA;AACA,iBAAA,SADA;AAEA,eAAA;AAFA,KAAA;AAIA;AANA,CAAA","sourcesContent":["<template>\n<div class=\"content\"><ClientOnly>\n<h1 id=\"input-group\"><a class=\"header-anchor\" href=\"#input-group\" aria-hidden=\"true\">#</a> Input group</h1>\n<p><strong>Easily extend form controls by adding text, buttons, or button groups on either side of textual inputs, custom selects, and custom file inputs.</strong></p>\n<h2 id=\"basic-example\"><a class=\"header-anchor\" href=\"#basic-example\" aria-hidden=\"true\">#</a> Basic example</h2>\n<br />\n<p>Place one add-on or button on either side of an input. You may also place one on both sides of an input. Remember to place <code>&lt;label&gt;</code>s outside the input group.</p>\n<element-slot :elementCode=\"content.data_1\" />\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.data_1\" />\n<h2 id=\"wrapping\"><a class=\"header-anchor\" href=\"#wrapping\" aria-hidden=\"true\">#</a> Wrapping</h2>\n<br />\n<p>Input groups wrap by default via <code>flex-wrap: wrap</code> in order to accommodate custom form field validation within an input group. You may disable this with <code>.flex-nowrap</code>.</p>\n<element-slot :elementCode=\"content.data_2\" />\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.data_2\" />\n<h2 id=\"sizing\"><a class=\"header-anchor\" href=\"#sizing\" aria-hidden=\"true\">#</a> Sizing</h2>\n<br />\n<p>Add the relative form sizing classes to the <code>.input-group</code> itself and contents within will automatically resize—no need for repeating the form control size classes on each element.</p>\n<p><strong>Sizing on the individual input group elements isn’t supported.</strong></p>\n<element-slot :elementCode=\"content.data_3\" />\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.data_3\" />\n<h2 id=\"checkboxes-and-radios\"><a class=\"header-anchor\" href=\"#checkboxes-and-radios\" aria-hidden=\"true\">#</a> Checkboxes and radios</h2>\n<br />\n<p>Place any checkbox or radio option within an input group’s addon instead of text.</p>\n<element-slot :elementCode=\"content.data_4\" />\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.data_4\" />\n<h2 id=\"multiple-inputs\"><a class=\"header-anchor\" href=\"#multiple-inputs\" aria-hidden=\"true\">#</a> Multiple inputs</h2>\n<br />\n<p>While multiple <code>&lt;input&gt;</code>s are supported visually, validation styles are only available for input groups with a single <code>&lt;input&gt;</code>.</p>\n<element-slot :elementCode=\"content.data_5\" />\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.data_5\" />\n<h2 id=\"multiple-addons\"><a class=\"header-anchor\" href=\"#multiple-addons\" aria-hidden=\"true\">#</a> Multiple addons</h2>\n<br />\n<p>Multiple add-ons are supported and can be mixed with checkbox and radio input versions.</p>\n<element-slot :elementCode=\"content.data_6\" />\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.data_6\" />\n<h2 id=\"button-addons\"><a class=\"header-anchor\" href=\"#button-addons\" aria-hidden=\"true\">#</a> Button addons</h2>\n<br />\n<p>Multiple add-ons are supported and can be mixed with checkbox and radio input versions.</p>\n<element-slot :elementCode=\"content.data_7\" />\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.data_7\" />\n<h2 id=\"buttons-with-dropdowns\"><a class=\"header-anchor\" href=\"#buttons-with-dropdowns\" aria-hidden=\"true\">#</a> Buttons with dropdowns</h2>\n<br />\n<element-slot :elementCode=\"content.data_8\" />\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.data_8\" />\n<h2 id=\"segmented-buttons\"><a class=\"header-anchor\" href=\"#segmented-buttons\" aria-hidden=\"true\">#</a> Segmented buttons</h2>\n<br />\n<element-slot :elementCode=\"content.data_9\" />\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.data_9\" />\n<h2 id=\"custom-forms\"><a class=\"header-anchor\" href=\"#custom-forms\" aria-hidden=\"true\">#</a> Custom forms</h2>\n<br />\n<p>Input groups include support for custom selects and custom file inputs. Browser default versions of these are not supported.</p>\n<h3 id=\"custom-select\"><a class=\"header-anchor\" href=\"#custom-select\" aria-hidden=\"true\">#</a> Custom select</h3>\n<br />\n<element-slot :elementCode=\"content.data_10\" />\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.data_10\" />\n<h3 id=\"custom-file-input\"><a class=\"header-anchor\" href=\"#custom-file-input\" aria-hidden=\"true\">#</a> Custom file input</h3>\n<br />\n<element-slot :elementCode=\"content.data_11\" />\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.data_11\" />\n<h2 id=\"accessibility\"><a class=\"header-anchor\" href=\"#accessibility\" aria-hidden=\"true\">#</a> Accessibility</h2>\n<br />\n<p>Screen readers will have trouble with your forms if you don’t include a label for every input. For these input groups, ensure that any additional label or functionality is conveyed to assistive technologies.</p>\n<p>The exact technique to be used (<code>&lt;label&gt;</code> elements hidden using the <code>.sr-only</code> class, or use of the <code>aria-label</code> and <code>aria-labelledby</code> attributes, possibly in combination with <code>aria-describedby</code>) and what additional information will need to be conveyed will vary depending on the exact type of interface widget you’re implementing. The examples in this section provide a few suggested, case-specific approaches.</p>\n</ClientOnly>\n</div>\n</template>\n<script>\n  import * as codeTypes from '@/utils/codeTypes'\n  import dataContent from '@/content/components/inputGroup'\n\n  export default {\n    data() {\n      return {\n        codeTypes: codeTypes,\n        content: dataContent          \n      }\n    }\n  }\n</script>"],"sourceRoot":"components/input-group"}]}