{"remainingRequest":"/Users/tranghuynh/Documents/design-system/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/tranghuynh/Documents/design-system/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/tranghuynh/Documents/design-system/components/scrollspy/README.md?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tranghuynh/Documents/design-system/components/scrollspy/README.md","mtime":1558491787796},{"path":"/Users/tranghuynh/Documents/design-system/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tranghuynh/Documents/design-system/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/Users/tranghuynh/Documents/design-system/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tranghuynh/Documents/design-system/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tranghuynh/Documents/design-system/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport jQuery from \"jquery\"\nimport \"bootstrap/scss/bootstrap.scss\"\nimport \"bootstrap/js/src\"\nimport * as codeTypes from '@/utils/codeTypes'\nimport JqueryMethods from '@/utils/methods'\nimport ScrollspyContent from '@/content/components/scrollspy'\n\n export default {\n     mounted() {\n         this.initScrollSpy()\n     },\n     methods: {\n         initScrollSpy() {\n            JqueryMethods.reloadPage()\n         }\n     },\n     data(){\n         return {\n             codeTypes: codeTypes, \n             content: ScrollspyContent\n         }\n     }\n }\n\n",{"version":3,"sources":["README.md"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"README.md","sourceRoot":"components/scrollspy","sourcesContent":["<template>\n<div class=\"content\"><ClientOnly>\n<h1 id=\"scrollspy\"><a class=\"header-anchor\" href=\"#scrollspy\" aria-hidden=\"true\">#</a> Scrollspy</h1>\n<p><strong>Automatically update Bootstrap navigation or list group components based on scroll position to indicate which link is currently active in the viewport.</strong></p>\n<h2 id=\"how-it-works\"><a class=\"header-anchor\" href=\"#how-it-works\" aria-hidden=\"true\">#</a> How it works</h2>\n<br>\n<p>Scrollspy has a few requirements to function properly:</p>\n<ul>\n<li>If you’re building our JavaScript from source, it <a href=\"https://getbootstrap.com/docs/4.3/getting-started/javascript/#util\" target=\"_blank\" rel=\"noopener noreferrer\">requires util.js<OutboundLink/></a>.</li>\n<li>It must be used on a Bootstrap <router-link to=\"/components/navs/\">nav component</router-link> or <router-link to=\"/components/list-group/#basic-example\">list group</router-link>.</li>\n<li>Scrollspy requires <code>position: relative;</code> on the element you’re spying on, usually the <code>&lt;body&gt;</code>.</li>\n<li>When spying on elements other than the <code>&lt;body&gt;</code>, be sure to have a <code>height</code> set and <code>overflow-y: scroll</code>; applied.</li>\n<li>Anchors (<code>&lt;a&gt;</code>) are required and must point to an element with that <code>id</code>.</li>\n</ul>\n<p>When successfully implemented, your nav or list group will update accordingly, moving the <code>.active</code> class from one item to the next based on their associated targets.</p>\n<h2 id=\"example-in-navbar\"><a class=\"header-anchor\" href=\"#example-in-navbar\" aria-hidden=\"true\">#</a> Example in navbar</h2>\n<br>\n<p>Scroll the area below the navbar and watch the active class change. The dropdown items will be highlighted as well.</p>\n<br>\n<element-slot :elementCode=\"content.scroll_Id_1\" />\n<br>\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.scroll_Id_1\" />\n<br>\n<h2 id=\"example-with-nested-nav\"><a class=\"header-anchor\" href=\"#example-with-nested-nav\" aria-hidden=\"true\">#</a> Example with nested nav</h2>\n<br>\n<p>Scrollspy also works with nested <code>.nav</code>s. If a nested <code>.nav</code> is <code>.active</code>, its parents will also be <code>.active</code>. Scroll the area next to the navbar and watch the active class change.</p>\n<br>\n<element-slot :elementCode=\"content.scroll_Id_2\" />\n<br>\n<br>\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.scroll_Id_2\" />\n<br>\n<h2 id=\"example-with-list-group\"><a class=\"header-anchor\" href=\"#example-with-list-group\" aria-hidden=\"true\">#</a> Example with list-group</h2>\n<br>\n<p>Scrollspy also works with <code>.list-group</code>s. Scroll the area next to the list group and watch the active class change.</p>\n<br>\n<element-slot :elementCode=\"content.scroll_Id_3\" />\n<br>\n<br>\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.scroll_Id_3\" />\n<br>\n<h2 id=\"usage\"><a class=\"header-anchor\" href=\"#usage\" aria-hidden=\"true\">#</a> Usage</h2>\n<br>\n<h3 id=\"via-data-attributes\"><a class=\"header-anchor\" href=\"#via-data-attributes\" aria-hidden=\"true\">#</a> Via data attributes</h3>\n<br>\n<p>To easily add scrollspy behavior to your topbar navigation, add <code>data-spy=&quot;scroll&quot;</code> to the element you want to spy on (most typically this would be the <code>&lt;body&gt;</code>). Then add the <code>data-target</code> attribute with the ID or class of the parent element of any Bootstrap <code>.nav</code> component.</p>\n<br>\n<source-code :codeType=\"codeTypes.CSS\" :content=\"content.scroll_Id_4\" />\n<br>\n<source-code :codeType=\"codeTypes.HTML\" :content=\"content.scroll_Id_5\" />\n<h2 id=\"via-javascript\"><a class=\"header-anchor\" href=\"#via-javascript\" aria-hidden=\"true\">#</a> Via JavaScript</h2>\n<br>\n<p>After adding <code>position: relative;</code> in your CSS, call the scrollspy via JavaScript:</p>\n<source-code :codeType=\"codeTypes.JS\" :content=\"content.scroll_Id_6\" />\n<br>\n<blockquote>\n<p><strong>Resolvable ID targets required</strong></p>\n<p>Navbar links must have resolvable id targets. For example, a <code>&lt;a href=&quot;#home&quot;&gt;home&lt;/a&gt;</code> must correspond to something in the DOM like <code>&lt;div id=&quot;home&quot;&gt;&lt;/div&gt;</code>.</p>\n</blockquote>\n<blockquote>\n<p><strong>Non-:<code>visible</code> target elements ignored</strong></p>\n<p>Target elements that are not <a href=\"https://api.jquery.com/visible-selector/\" target=\"_blank\" rel=\"noopener noreferrer\"><code>:visible according to jQuery</code><OutboundLink/></a> will be ignored and their corresponding nav items will never be highlighted.</p>\n</blockquote>\n<h2 id=\"methods\"><a class=\"header-anchor\" href=\"#methods\" aria-hidden=\"true\">#</a> Methods</h2>\n<h3 id=\"scrollspy-refresh\"><a class=\"header-anchor\" href=\"#scrollspy-refresh\" aria-hidden=\"true\">#</a> <code>.scrollspy('refresh')</code></h3>\n<br>\n<p>When using scrollspy in conjunction with adding or removing of elements from the DOM, you’ll need to call the refresh method like so:</p>\n<source-code :codeType=\"codeTypes.JS\" :content=\"content.scroll_Id_7\" />\n<h3 id=\"scrollspy-dispose\"><a class=\"header-anchor\" href=\"#scrollspy-dispose\" aria-hidden=\"true\">#</a> <code>.scrollspy('dispose')</code></h3>\n<br>\n<p>Destroys an element’s scrollspy.</p>\n<h2 id=\"options\"><a class=\"header-anchor\" href=\"#options\" aria-hidden=\"true\">#</a> Options</h2>\n<br>\n<p>Options can be passed via data attributes or JavaScript. For data attributes, append the option name to <code>data-</code>, as in <code>data-offset=&quot;&quot;</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>offset</td>\n<td>number</td>\n<td>10</td>\n<td>Pixels to offset from top when calculating position of scroll.</td>\n</tr>\n<tr>\n<td>method</td>\n<td>string</td>\n<td>auto</td>\n<td>Finds which section the spied element is in. <code>auto</code> will choose the best method get scroll coordinates. <code>offset</code> will use jQuery offset method to get scroll coordinates. <code>position</code> will use jQuery position method to get scroll coordinates.</td>\n</tr>\n<tr>\n<td>target</td>\n<td>string</td>\n<td></td>\n<td>Specifies element to apply Scrollspy plugin.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"events\"><a class=\"header-anchor\" href=\"#events\" aria-hidden=\"true\">#</a> Events</h2>\n<br>\n<table>\n<thead>\n<tr>\n<th>Event Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>activate.bs.scrollspy</td>\n<td>This event fires on the scroll element whenever a new item becomes activated by the scrollspy.</td>\n</tr>\n</tbody>\n</table>\n<br>\n<source-code :codeType=\"codeTypes.JS\" :content=\"content.scroll_Id_8\" />\n<br>\n</ClientOnly>\n</div>\n</template>\n<script>\n\nimport jQuery from \"jquery\"\nimport \"bootstrap/scss/bootstrap.scss\"\nimport \"bootstrap/js/src\"\nimport * as codeTypes from '@/utils/codeTypes'\nimport JqueryMethods from '@/utils/methods'\nimport ScrollspyContent from '@/content/components/scrollspy'\n\n export default {\n     mounted() {\n         this.initScrollSpy()\n     },\n     methods: {\n         initScrollSpy() {\n            JqueryMethods.reloadPage()\n         }\n     },\n     data(){\n         return {\n             codeTypes: codeTypes, \n             content: ScrollspyContent\n         }\n     }\n }\n\n</script>\n\n<style lang=\"scss\">\n.navbar-demo {\n  position: relative;\n  display: flex;\n  flex-wrap: wrap; // allow us to do the line break for collapsing content\n  align-items: center;\n  justify-content: space-between; // space out brand from logo\n  padding: 5px 10px;\n\n  > .container,\n  > .container-fluid {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n  }\n}\n\n.scrollspy-example{\n    position: relative;\n    height: 200px;\n    margin-top: .5rem;\n    overflow: auto;\n}\n.navbar{\n    line-height: normal;\n    }\n.bd-example {\n    position: relative;\n    padding: 1rem;\n    margin: 1rem -15px 0;\n    border: solid #f8f9fa;\n    border-width: .2rem 0 0;\n}\n.bg-light {\n    background-color: #f8f9fa!important;\n}\n.scrollspy-example-2 {\n    position: relative;\n    height: 350px;\n    overflow: auto;\n}\n\n</style>"]}]}